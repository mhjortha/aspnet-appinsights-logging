@page "/"
@using Log.Client.Contracts
@inject HttpClient Client
@* @inject ILoggerAdapter<Index> Logger *@
@inject ILogger<Index> Logger
@inject IApplicationInsights AppInsights

<PageTitle>Index</PageTitle>


<EditForm Model="_userRequest" OnSubmit="AddUser" class="mb-5">
    <div class="mb-3">
        <label class="form-label">Firstname</label>
        <InputText class="form-control" @bind-Value="_userRequest.Firstname"></InputText>
    </div>
    <div class="mb-3">
        <label class="form-label">Lastname</label>
        <InputText class="form-control" @bind-Value="_userRequest.Lastname"></InputText>
    </div>
    <div class="mb-3">
        <label class="form-label">Age</label>
        <InputNumber class="form-control" @bind-Value="_userRequest.Age"></InputNumber>
    </div>
    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>


<table class="table">
    <thead>
    <tr>
        <th scope="col">#</th>
        <th scope="col">Firstname</th>
        <th scope="col">Lastname</th>
        <th scope="col">Age</th>
        <th scope="col"></th>
    </tr>
    </thead>
    <tbody>
    @if (_users is not null)
    {
        @foreach (var user in _users)
        {
            <tr>
                <th scope="row">@user.Id</th>
                <td>@user.Firstname</td>
                <td>@user.Lastname</td>
                <td>@user.Age</td>
                <td><button class="btn btn-primary" @onclick="@(() => DeleteUser(@user.Id))">Delete</button></td>
            </tr>
        }
    }
    </tbody>
</table>


@code {
    private List<User> _users = new();
    private CreateUserRequest _userRequest = new();

    protected async override Task OnInitializedAsync()
    {
        await AppInsights.TrackPageView("index.razor", "https://app-frontend-test-logging.azurewebsites.net/");
        await base.OnInitializedAsync();
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            _users = await Client.GetFromJsonAsync<List<User>>("api/v1/user");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
        StateHasChanged();
    }

    private async Task DeleteUser(int id)
    {
        var response = await Client.DeleteAsync($"api/v1/user/{id}");
        if (response.IsSuccessStatusCode)
        {
            await LoadData();
        }
    }

    private async Task AddUser()
    {
        Logger.LogInformation("Clicked button for adding user: {Firstname} {Lastname}",
            _userRequest.Firstname, _userRequest.Lastname);
        var response = await Client.PostAsJsonAsync("api/v1/user", _userRequest);
        if (response.IsSuccessStatusCode)
        {
            await LoadData();
            _userRequest = new CreateUserRequest();
        }
    }

}